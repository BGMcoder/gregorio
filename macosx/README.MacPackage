Modifications for Building a Mac OS X Package
=============================================
To distribute a binary for OS X, we need to remove the dependencies on the shared libraries libintl.8.dylib and libltdl.3.dylib, which are not guaranteed to exist on a user's system. To do this, we statically link against libltdl and prepare the project source for building its own static libintl with this in the top source directory:
$ gettextize --intl -f


And make the following modifications to the build system (commented lines show the current, unmodified commands):

Changes in configure.ac
=======================
- change the gettext invocation to use an internal gettext
#AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT()

- gettextize should also have automatically added intl/Makefile to AC_CONFIG_FILES

Changes in Makefile.am
======================
- in the top directory (/trunk/Makefile.am), add the intl dir list of subdirectories
SUBDIRS= po include intl lib plugins src examples tex contrib

Building Universal Binary
==================================
That should be all that is needed... so now we run
$ autoreconf
There will be a ton of warnings, which hopefully can safely be ignored.
$ ./configure --with-included-gettext --enable-static-ltdl --disable-dependency-tracking

$ make CFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386" LDFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386 -arch ppc -arch i386"
# make install

**TODO: -isysroot really?**
If this method fails, you can build the architectures separately, and use lipo to combine them.
 
For 10.4 compatibility
=====================
**TODO: figure out build errors using the Tiger SDK (libiconv might be the source)**
--for Tiger compatibility this (or an equivalent setting) is also needed:
$ MACOSX_DEPLOYMENT_TARGET=10.4
$ export MACOSX_DEPLOYMENT_TARGET
--also would need to remind user to make sure /usr/local is in their PATH (this is not true in a default 10.4 machine, even if it is true in Leopard)

**TODO: find out what this warning even means:
ld warning: can't add line info to anonymous symbol __text@0 from /Developer/SDKs/MacOSX10.5.sdk/usr/lib/libltdl.a(ltdl.o)
The binary still works, but it's kind of crappy to see a hundred of those lines while building (only happens when building a universal binary directly; building intel and ppc separately and then combining them with lipo gives no such warnings)**

Possible Issues
=================
- Make may fail in the intl subdir -- When building in intl, it looks for config.h in the top src dir (i.e. trunk) when in fact it's in trunk/include. You can probably change it to look in the proper place, but the lazy method of copying config.h into trunk also works...
- Leopard (by default) builds ppc shared libraries (e.g., libgregorio.dylib) for ppc7400. This is bad for G3 and earlier Macs, but since these directions currently build a Leopard only binary, which wouldn't run on such old computers, this hardly matters. It may later...
- building in a more convenient subdirectory (i.e. running ./configure --prefix="/my/package/builddir/root") requires fixing the library path names later (it may actually work without doing so, but leaving the incorrect paths seems a bit ugly)

Using PackageMaker
===============================
PackageMaker requires absolute paths to be given for everything installed. So it's easier to create a package root with two subdirs, usr (which leads to all the gregorio files in local/bin, local/lib, etc) and private/tmp/Gregorio, where we can put contrib/, examples/, fonts/, tex/, and the uninstall script. The postflight script will move this directory into the user's home dir, and delete the /private/tmp folder.

We'll assume we have all the files necessary. Opening PackageMaker first gives a dialog where you can fill in the org name and min target for deployment. If you built in a special directory like /my/package/builddir/root, you can just drag the entire thing into the Contents frame. If not... just be careful in recreating the exact directory you want copied onto the user's machine.

**If there are any unwanted files like the .DS_STORE files in this directory, you can filter them out in the Contents view. Or delete them before copying the directory, by running something like
$ find /my/package/builddir/root -name ".DS_Store" -exec rm -f {} \;

Also change the permissions here to match what they should be on the user's machine.

In the scripts view, just add the postflight.sh script.

In edit interface, you can change the background image, and add the Welcome, Read Me, and license files and add localizations.

Thats pretty much it, run build to make the package.

Then it's standard to distribute packages in dmg files. You can do that with Disk utility -- file->new->disk image from folder (there's a commandline equivalent; I don't know what it is though)
Call it Gregorio-0.9.2.dmg or something similar I suppose, and it's done.


